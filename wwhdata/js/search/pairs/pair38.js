function FileData_Pairs(x)
{
x.t("enabling","tls");
x.t("example","keystore");
x.t("example","truststore");
x.t("example","tls_cipher_suites");
x.t("example","allow");
x.t("example","tls");
x.t("example","clientauthentication");
x.t("included","jre");
x.t("below","enable");
x.t("parameter","default");
x.t("parameter","doradus.yaml");
x.t("parameter","file\u2019s");
x.t("http://docs.oracle.com/javase/6/docs/technotes/guides/security/jsse/jsserefguide.html","createkeystore");
x.t("keystorepassword","parameter");
x.t("keystorepassword","mykspassword");
x.t("available","jvm");
x.t("files","doradus");
x.t("tls_ecdhe_ecdsa_with_aes_256_cbc_sha","tls_ecdhe_rsa_with_aes_256_cbc_sha");
x.t("create","certificate");
x.t("create","self-signed");
x.t("installed","jvm");
x.t("keystore","parameter");
x.t("keystore","file");
x.t("keystore","config/keystore");
x.t("controlled","via");
x.t("enabled","controlled");
x.t("enabled","restrict");
x.t("enabled","submit");
x.t("referenced","above");
x.t("uses","unencrypted");
x.t("uses","mutual");
x.t("article","referenced");
x.t("tailored","example");
x.t("support","configured");
x.t("createkeystore","keystore");
x.t("encrypts","traffic");
x.t("default","doradus");
x.t("default","list");
x.t("unencrypted","http");
x.t("require","client");
x.t("listed","algorithms");
x.t("tls_rsa_with_aes_256_cbc_sha","tls_ecdhe_ecdsa_with_aes_256_cbc_sha");
x.t("doradus","security");
x.t("doradus","provides");
x.t("doradus","rest");
x.t("doradus","tls");
x.t("doradus","steps");
x.t("doradus","configuration");
x.t("doradus","running");
x.t("doradus","server");
x.t("access","specific");
x.t("doradus.yaml","file");
x.t("mykspassword","client");
x.t("includes","algorithms");
x.t("security","options");
x.t("security","process");
x.t("http","doradus");
x.t("file","keystorepassword");
x.t("file","article");
x.t("file","true");
x.t("file","requires");
x.t("file","keytool");
x.t("file","truststorepassword");
x.t("file","location");
x.t("list","tailored");
x.t("list","includes");
x.t("api","uses");
x.t("api","default");
x.t("api","doradus");
x.t("api","securing");
x.t("api","tls");
x.t("api","secured");
x.t("api","connections");
x.t("api","port");
x.t("api","subset");
x.t("traffic","uses");
x.t("overview","process");
x.t("truststore","parameter");
x.t("truststore","file");
x.t("truststore","client");
x.t("truststore","config/truststore");
x.t("recommended","fips");
x.t("true","example");
x.t("true","create");
x.t("true","cipher");
x.t("requires","rest");
x.t("via","tls_cipher_suites");
x.t("operation","doradus");
x.t("tls_cipher_suites","parameter");
x.t("tls_cipher_suites","tls_dhe_dss_with_aes_256_cbc_sha");
x.t("jvm","doradus");
x.t("jvm","used");
x.t("clients","optionally");
x.t("clients","connect");
x.t("perform","schema");
x.t("custom","algorithms");
x.t("provides","application-level");
x.t("mutual","authentication");
x.t("rest","api");
x.t("rest","port");
x.t("certificates","registered");
x.t("certificate","doradus");
x.t("certificate","added");
x.t("certificate","client");
x.t("certificate","outline");
x.t("cipher","algorithms");
x.t("cipher","algorithm");
x.t("compliance","actual");
x.t("allow","256-bit");
x.t("store","keystore");
x.t("commands","rest");
x.t("registered","server");
x.t("configured","cipher");
x.t("securing","doradus");
x.t("securing","rest");
x.t("options","securing");
x.t("allowed","perform");
x.t("allowed","rest");
x.t("file\u2019s","password");
x.t("long","installed");
x.t("tls_dhe_rsa_with_aes_256_cbc_sha","tls_rsa_with_aes_256_cbc_sha");
x.t("tls","parameter");
x.t("tls","enabled");
x.t("tls","true");
x.t("tls","rest");
x.t("tls","client");
x.t("tls","(ssl)");
x.t("tls","defined");
x.t("tls","setting");
x.t("tls_dhe_dss_with_aes_256_cbc_sha","tls_dhe_rsa_with_aes_256_cbc_sha");
x.t("algorithms","recommended");
x.t("algorithms","allowed");
x.t("algorithms","actually");
x.t("algorithms","used");
x.t("added","truststore");
x.t("secured","enabling");
x.t("client","support");
x.t("client","authentication");
x.t("client","application");
x.t("enable","tls");
x.t("keytool","utility");
x.t("steps","above");
x.t("restrict","access");
x.t("restrict","connections");
x.t("schema","update");
x.t("whose","certificates");
x.t("actual","algorithms");
x.t("config/keystore","keystorepassword");
x.t("encryption","example");
x.t("configuration","files");
x.t("configuration","operation");
x.t("application-level","security");
x.t("running","cipher");
x.t("tls_ecdhe_rsa_with_aes_256_cbc_sha","tls_ecdh_ecdsa_with_aes_256_cbc_sha");
x.t("specific","clients");
x.t("truststorepassword","parameter");
x.t("truststorepassword","mytspassword");
x.t("process","create");
x.t("process","securing");
x.t("process","connect");
x.t("(ssl)","encrypts");
x.t("connections","mutual");
x.t("connections","whose");
x.t("import","truststore");
x.t("clientauthentication","parameter");
x.t("clientauthentication","true");
x.t("actually","available");
x.t("authentication","example");
x.t("authentication","enabled");
x.t("authentication","clients");
x.t("authentication","restrict");
x.t("authentication","clientauthentication");
x.t("authentication","used");
x.t("config/truststore","truststorepassword");
x.t("self-signed","certificate");
x.t("location","keystore");
x.t("query","commands");
x.t("fips","compliance");
x.t("symmetrical","encryption");
x.t("defined","below");
x.t("utility","included");
x.t("application","import");
x.t("submit","certificate");
x.t("port","allowed");
x.t("port","tls");
x.t("port","optionally");
x.t("port","using");
x.t("above","doradus");
x.t("above","truststore");
x.t("subset","listed");
x.t("requiring","mutual");
x.t("optionally","client");
x.t("optionally","requiring");
x.t("algorithm","list");
x.t("jre","overview");
x.t("used","create");
x.t("used","long");
x.t("used","run");
x.t("run","doradus");
x.t("connect","doradus");
x.t("connect","rest");
x.t("setting","tls");
x.t("tls_ecdh_ecdsa_with_aes_256_cbc_sha","tls_ecdh_rsa_with_aes_256_cbc_sha");
x.t("using","tls");
x.t("password","example");
x.t("outline","http://docs.oracle.com/javase/6/docs/technotes/guides/security/jsse/jsserefguide.html");
x.t("mytspassword","require");
x.t("tls_ecdh_rsa_with_aes_256_cbc_sha","custom");
x.t("256-bit","symmetrical");
x.t("update","query");
x.t("server","store");
x.t("server","process");
}
