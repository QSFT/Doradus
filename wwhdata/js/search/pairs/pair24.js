function FileData_Pairs(x)
{
x.t("enabling","multi-tenant");
x.t("keyspaces","multi-node");
x.t("provide","valid");
x.t("enforce","user");
x.t("simplestrategy","strategy_options");
x.t("arguments","prevent");
x.t("storing","doradus.yaml");
x.t("strategy_options","replication_factor");
x.t("enabled","setting");
x.t("enabled","application-specific");
x.t("user","id/password");
x.t("user","therefore");
x.t("creates","corresponding");
x.t("mode","enabled");
x.t("mode","requires");
x.t("keyspace","options");
x.t("keyspace","using");
x.t("hence","default");
x.t("hence","use_cql");
x.t("public","tenant");
x.t("identify","specific");
x.t("default","keyspace");
x.t("default","tenant");
x.t("require","tenant");
x.t("doradus","creates");
x.t("doradus","configured");
x.t("new","keyspaces");
x.t("new","tenant");
x.t("doradus.yaml","file");
x.t("doradus.yaml","options");
x.t("doradus.yaml","option");
x.t("use_cql","true");
x.t("cassandra","enforce");
x.t("cassandra","keyspace");
x.t("cassandra","dbpassword");
x.t("cassandra","described");
x.t("file","options");
x.t("file","multi-tenant");
x.t("strategy_class","simplestrategy");
x.t("dbpassword","cassandra");
x.t("dbpassword","runtime");
x.t("api","hence");
x.t("credentials","hence");
x.t("credentials","tenant");
x.t("availability","case");
x.t("true","use_cql");
x.t("true","options");
x.t("true","multi-tenant");
x.t("true","option");
x.t("true","dbport");
x.t("requires","cassandra");
x.t("requires","cql");
x.t("requires","setting");
x.t("defaults","new");
x.t("operation","enabled");
x.t("operation","multi-tenant");
x.t("creating","overriding");
x.t("changed","different");
x.t("overriding","default");
x.t("rest","commands");
x.t("9042","dbuser");
x.t("replication_factor","durable_writes");
x.t("replication_factor","increased");
x.t("configured","super");
x.t("commands","identify");
x.t("commands","require");
x.t("commands","directed");
x.t("finally","multi-tenant");
x.t("id/password","authentication");
x.t("cassandra\u2019s","cql");
x.t("options","changed");
x.t("options","template");
x.t("options","multitenant_mode");
x.t("multi-tenant","mode");
x.t("multi-tenant","operation");
x.t("multi-tenant","configuration");
x.t("tenant","provide");
x.t("tenant","new");
x.t("tenant","credentials");
x.t("tenant","creating");
x.t("tenant","commands");
x.t("tenant","considered");
x.t("tenant","defined");
x.t("tenant","disable");
x.t("tenant","setting");
x.t("tenant","directed");
x.t("cluster","replication_factor");
x.t("different","defaults");
x.t("durable_writes","true");
x.t("section","pass");
x.t("ks_defaults","strategy_class");
x.t("multi-node","cluster");
x.t("node","failure");
x.t("dbhost","dbpassword");
x.t("previous","section");
x.t("option","disable_default_keyspace");
x.t("option","application-specific");
x.t("ensure","data");
x.t("dbport","9042");
x.t("dbport","cassandra\u2019s");
x.t("configuration","multi-tenant");
x.t("cql","api");
x.t("cql","port");
x.t("disable_default_keyspace","true");
x.t("failure","note");
x.t("specific","tenant");
x.t("authentication","doradus");
x.t("considered","public");
x.t("valid","credentials");
x.t("template","ks_defaults");
x.t("data","availability");
x.t("defined","doradus");
x.t("runtime","arguments");
x.t("prevent","storing");
x.t("disable","default");
x.t("case","node");
x.t("port","finally");
x.t("described","previous");
x.t("note","tenant");
x.t("following","doradus.yaml");
x.t("corresponding","cassandra");
x.t("setting","following");
x.t("setting","multitenant_mode");
x.t("using","following");
x.t("pass","dbhost");
x.t("therefore","enabling");
x.t("directed","default");
x.t("directed","specific");
x.t("multitenant_mode","true");
x.t("dbuser","cassandra");
x.t("increased","ensure");
x.t("super","user");
x.t("application-specific","rest");
}
