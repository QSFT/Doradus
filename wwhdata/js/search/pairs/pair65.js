function FileData_Pairs(x)
{
x.t("deployments","multiple");
x.t("centers","deployed");
x.t("centers","encryption");
x.t("http://docs.oracle.com/javase/6/docs/technotes/guides/security/jsse/jsserefguide.html","createkeystore");
x.t("defines","port");
x.t("files","password-protected");
x.t("files","cassandra");
x.t("files","found");
x.t("files","defined");
x.t("eavesdropping","unauthorized");
x.t("disruptions","gossip");
x.t("having","number");
x.t("key","exchange");
x.t("instructions","creating");
x.t("ssl","enabled");
x.t("keystore","truststore");
x.t("keystore","conf/.keystore");
x.t("password-protected","using");
x.t("enabled","gossip");
x.t("enabled","disabled");
x.t("secure","gossip");
x.t("tls_rsa_with_aes_128_cbc_sha","requires");
x.t("uses","tcp");
x.t("uses","non-encrypted");
x.t("remote","locations");
x.t("locations","co-located");
x.t("deploy","cassandra");
x.t("center","communication");
x.t("center","encrypted");
x.t("inter-node","communication");
x.t("inter-node","encryption");
x.t("7000","ssl");
x.t("7001","nodes");
x.t("however","protocol");
x.t("multiple","racks");
x.t("cross-data","center");
x.t("unencrypted","communication");
x.t("access","gossip");
x.t("link","http://docs.oracle.com/javase/6/docs/technotes/guides/security/jsse/jsserefguide.html");
x.t("disallow","access");
x.t("cassandra","deployments");
x.t("cassandra","security");
x.t("cassandra","gossip");
x.t("cassandra","truststore");
x.t("cassandra","node");
x.t("cassandra","configuration");
x.t("cassandra","nodes");
x.t("cassandra","internode");
x.t("security","options");
x.t("file","option");
x.t("file","encryption_options");
x.t("found","publicly");
x.t("gossip","api");
x.t("gossip","port");
x.t("gossip","protocol");
x.t("storage_port","7000");
x.t("storage_port","enables");
x.t("storage_port","ssl_storage_port");
x.t("api","enabled");
x.t("api","deploy");
x.t("initialized","files");
x.t("tcp","port");
x.t("recommended","except");
x.t("large","cassandra");
x.t("truststore","files");
x.t("truststore","conf/.truststore");
x.t("referred","tls_rsa_with_aes_128_cbc_sha");
x.t("requires","keystore");
x.t("operation","cassandra");
x.t("outside","subnet");
x.t("creating","files");
x.t("communication","remote");
x.t("communication","nodes");
x.t("communication","done");
x.t("communication","using");
x.t("enables","encryption");
x.t("peer","nodes");
x.t("none","keystore");
x.t("none","disables");
x.t("keystore_password","cassandra");
x.t("keystore_password","truststore_password");
x.t("truststore_password","cassandra");
x.t("truststore_password","options");
x.t("replicating","data");
x.t("easiest","secure");
x.t("encrypted","communication");
x.t("rack","uses");
x.t("rack","(cabinet)");
x.t("ssl_storage_port","7001");
x.t("ssl_storage_port","rack");
x.t("ssl_storage_port","prevent");
x.t("configured","storage_port");
x.t("unauthorized","disruptions");
x.t("deployed","having");
x.t("occurs","tls");
x.t("securing","cassandra");
x.t("options","instructions");
x.t("options","securing");
x.t("options","cassandra.yaml");
x.t("options","recognized");
x.t("environments","however");
x.t("number","cassandra");
x.t("number","used");
x.t("cluster","cassandra");
x.t("cluster","configured");
x.t("rsa","1024");
x.t("high-performance","operations");
x.t("different","racks");
x.t("different","data");
x.t("exchange","data");
x.t("tls","using");
x.t("racks","uses");
x.t("racks","data");
x.t("multi-node","cluster");
x.t("node","communicates");
x.t("secured","production");
x.t("secured","cross-rack");
x.t("disabled","setting");
x.t("publicly","link");
x.t("option","defines");
x.t("option","storage_port");
x.t("option","following");
x.t("conf/.keystore","keystore_password");
x.t("encryption","enabled");
x.t("encryption","inter-node");
x.t("encryption","gossip");
x.t("encryption","recommended");
x.t("encryption","suite");
x.t("encryption","meaning");
x.t("1024","bit");
x.t("configuration","files");
x.t("configuration","operation");
x.t("keys","encryption");
x.t("suite","referred");
x.t("connections","gossip");
x.t("co-located","nodes");
x.t("authentication","key");
x.t("nodes","unencrypted");
x.t("nodes","gossip");
x.t("nodes","easiest");
x.t("nodes","cluster");
x.t("nodes","encryption");
x.t("nodes","defined");
x.t("nodes","subnet");
x.t("nodes","using");
x.t("transfer","occurs");
x.t("data","centers");
x.t("data","center");
x.t("data","nodes");
x.t("data","transfer");
x.t("defined","storage_port");
x.t("defined","initialized");
x.t("defined","rack");
x.t("defined","ssl_storage_port");
x.t("defined","different");
x.t("defined","data");
x.t("defined","following");
x.t("production","environments");
x.t("meaning","cassandra");
x.t("bit","keys");
x.t("prevent","eavesdropping");
x.t("internode","encryption");
x.t("port","outside");
x.t("port","number");
x.t("port","defined");
x.t("protocol","uses");
x.t("protocol","cassandra");
x.t("protocol","securing");
x.t("protocol","multi-node");
x.t("protocol","secured");
x.t("protocol","authentication");
x.t("protocol","following");
x.t("protocol","used");
x.t("protocol","non-encrypted");
x.t("done","following");
x.t("internode_encryption","none");
x.t("internode_encryption","option");
x.t("disables","inter-node");
x.t("communicates","peer");
x.t("cross-rack","cross-data");
x.t("following","options");
x.t("following","cassandra.yaml");
x.t("cassandra.yaml","file");
x.t("cassandra.yaml","option");
x.t("used","ssl_storage_port");
x.t("used","high-performance");
x.t("except","communication");
x.t("subnet","disallow");
x.t("subnet","large");
x.t("using","gossip");
x.t("using","keystore_password");
x.t("using","rsa");
x.t("using","defined");
x.t("non-encrypted","communication");
x.t("non-encrypted","connections");
x.t("setting","internode_encryption");
x.t("recognized","none");
x.t("(cabinet)","encrypted");
x.t("operations","replicating");
x.t("encryption_options","internode_encryption");
x.t("conf/.truststore","truststore_password");
}
