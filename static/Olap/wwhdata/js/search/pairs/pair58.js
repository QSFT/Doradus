function FileData_Pairs(x)
{
x.t("example","(internalrecipients)");
x.t("example","link");
x.t("example","none");
x.t("(internalrecipients)",".person.lastname");
x.t("ever","person");
x.t("applied","link");
x.t("every","internalrecipients.person");
x.t("every","internalrecipients");
x.t("negation","means");
x.t("internalrecipients.person","quantified");
x.t("field","paths");
x.t("essentially","adds");
x.t("(dql)","quantifier");
x.t("explicitly","quantified");
x.t("(2)","remainder");
x.t("satisfy","second");
x.t(".lastname","null");
x.t("quantifier","field");
x.t("quantifier","none");
x.t("quantifier","functions");
x.t("requirement","quantified");
x.t("doradus","query");
x.t("link","path");
x.t("link","implicitly");
x.t("objects","lastname");
x.t("objects","selected");
x.t("objects","without");
x.t("associative","portion");
x.t(".person.lastname","null");
x.t("false","associative");
x.t("selects","opposite");
x.t("true","internalrecipients");
x.t("true","(1)");
x.t("true","perspective");
x.t("true","object");
x.t("path","explicitly");
x.t("path","quantifier");
x.t("path","empty");
x.t("path","produces");
x.t("path","null");
x.t("path","used");
x.t("resulting","value");
x.t("exists","null");
x.t("alternatively","consider");
x.t("none","(internalrecipients)");
x.t("none","used");
x.t("empty","example");
x.t("empty","(2)");
x.t("empty","following");
x.t("second","condition");
x.t("functions","quantifiers");
x.t("lastname","essentially");
x.t("lastname","null");
x.t("selected","following");
x.t("selected","clause");
x.t("means","objects");
x.t("internalrecipients","cannot");
x.t("internalrecipients","person");
x.t("internalrecipients","null");
x.t("internalrecipients","value");
x.t("internalrecipients","object");
x.t("person","objects");
x.t("person","lastname");
x.t("person","person");
x.t("person","null");
x.t("person","object");
x.t("words","least");
x.t("cannot","null");
x.t("language","(dql)");
x.t("(1)","quantified");
x.t("adds","existential");
x.t("least","internalrecipients");
x.t("least","internalrecipients.person.lastname");
x.t("produces","empty");
x.t("(x)","null");
x.t("null","ever");
x.t("null","every");
x.t("null","satisfy");
x.t("null","quantifier");
x.t("null","doradus");
x.t("null","false");
x.t("null","resulting");
x.t("null","lastname");
x.t("null","selected");
x.t("null","person");
x.t("null","least");
x.t("null","quantifiers");
x.t("null","case");
x.t("null","special");
x.t("null","clause");
x.t("null","person.lastname");
x.t("null","quantified");
x.t("consider","quantification");
x.t("qualified","internalrecipients.person.lastname");
x.t("negated","selects");
x.t("value","empty");
x.t("value","either");
x.t("quantifiers","null");
x.t("condition","alternatively");
x.t("query","language");
x.t("semantics","applied");
x.t("internalrecipients.person.lastname","exists");
x.t("internalrecipients.person.lastname","null");
x.t("result","link");
x.t("opposite","objects");
x.t("implicitly","qualified");
x.t("case","internalrecipients");
x.t("perspective","object");
x.t("existential","requirement");
x.t("special","semantics");
x.t("used","null");
x.t("used","quantified");
x.t("clause","true");
x.t("clause","(x)");
x.t("clause","negated");
x.t("clause","quantified");
x.t("following","example");
x.t("following","clause");
x.t("either","person");
x.t("either","internalrecipients");
x.t("(internalrecipients.person)",".lastname");
x.t("person.lastname","null");
x.t("portion","link");
x.t("portion","path");
x.t("remainder","path");
x.t("without","negation");
x.t("quantified","link");
x.t("quantified","null");
x.t("quantified","result");
x.t("quantified","clause");
x.t("quantified","portion");
x.t("object","lastname");
x.t("object","internalrecipients");
x.t("object","words");
x.t("object","either");
x.t("quantification","(internalrecipients.person)");
}
