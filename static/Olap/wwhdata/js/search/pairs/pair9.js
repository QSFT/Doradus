function FileData_Pairs(x)
{
x.t("example","startembedded");
x.t("decrease","merge");
x.t("parameter","find");
x.t("parameter","controls");
x.t("parameter","used");
x.t("available","resources");
x.t("compression","speed");
x.t("compression","rest");
x.t("compression","level");
x.t("compression","value");
x.t("compression","using");
x.t("compression","ratio");
x.t("balance","cpu");
x.t("balance","number");
x.t("half","possibly");
x.t("doradusserver.startembedded","string");
x.t("cpus","decrease");
x.t("background","merges");
x.t("background","merging");
x.t("batches","longer");
x.t("batches","using");
x.t("batches","containing");
x.t("optimal","batch");
x.t("improve","reduces");
x.t("content-encoding","gzip");
x.t("provided","doradus");
x.t("batch","size");
x.t("batch","data");
x.t("best","update");
x.t("lots","small");
x.t("distributes","load");
x.t("time","compression");
x.t("time","background");
x.t("time","adjust");
x.t("time","cost");
x.t("time","enable");
x.t("time","roughly");
x.t("explicitly","requesting");
x.t("merges","via");
x.t("merges","setting");
x.t("parsing","bulk");
x.t("multiple","threads");
x.t("single-threaded","compression");
x.t("single-threaded","merging");
x.t("default","value");
x.t("speed","improve");
x.t("updates","updates");
x.t("updates","olap");
x.t("updates","embed");
x.t("doradus","provided");
x.t("doradus","rest");
x.t("doradus","instances");
x.t("doradus","application");
x.t("doradus","administration");
x.t("doradus","server");
x.t("bulk","loading");
x.t("start","server");
x.t("objects","depending");
x.t("single","load");
x.t("(9)","employs");
x.t("among","doradus");
x.t("embedding","doradus");
x.t("size","olap");
x.t("size","shards");
x.t("size","application");
x.t("size","merge");
x.t("doradus.yaml","file");
x.t("startserverunblocked","string");
x.t("need","increase");
x.t("need","embedded");
x.t("http","compression");
x.t("http","header");
x.t("cpu","balance");
x.t("cpu","time");
x.t("cpu","memory");
x.t("cpu","therefore");
x.t("file","parameter");
x.t("add","batch");
x.t("add","http");
x.t("optimize","batch");
x.t("parallel","even");
x.t("simplifies","application");
x.t("api","cuts");
x.t("api","compress");
x.t("api","embed");
x.t("due","marshaling");
x.t("network","transfer");
x.t("com.dell.doradus.service.olap.olapservice","second");
x.t("increase","olap_merge_threads");
x.t("overview","optimizing");
x.t("selects","good");
x.t("olap","works");
x.t("olap","benefits");
x.t("olap","database");
x.t("olap","applications");
x.t("olap","service");
x.t("requires","memory");
x.t("defaults","single-threaded");
x.t("via","rest");
x.t("possibly","due");
x.t("possibly","olap");
x.t("jvm","application");
x.t("creating","olapbatch");
x.t("tasks","among");
x.t("requesting","merges");
x.t("methods","http");
x.t("find","application\u2019s");
x.t("determine","optimal");
x.t("optimizing","olap");
x.t("rest","api");
x.t("rest","commands");
x.t("marshaling","network");
x.t("loading","data");
x.t("segments","parallel");
x.t("segments","compressed");
x.t("cuts","load");
x.t("string","appname");
x.t("string","services");
x.t("string","args");
x.t("concurrent","threads");
x.t("adjust","olap_compression_level");
x.t("obviously","works");
x.t("second","parameter");
x.t("input","batches");
x.t("thread","defaults");
x.t(".addbatch","methods");
x.t("1000","objects");
x.t("shards","containing");
x.t("small","batches");
x.t("clusters","distributes");
x.t("appname","add");
x.t("frequency","determine");
x.t("commands","schedule");
x.t("logic","clusters");
x.t("disk","space");
x.t("automatic","background");
x.t("select","smaller");
x.t("smaller","value");
x.t("space","highest");
x.t("number","cpus");
x.t("number","load");
x.t("cost","using");
x.t("maximum","compression");
x.t("whether","rest");
x.t("lengthening","merge");
x.t("application\u2019s","applicationdefinition");
x.t("olapservice.instance",".addbatch");
x.t("instead","explicitly");
x.t("reduce","need");
x.t("jvm-based","applications");
x.t("compressed","default");
x.t("works","best");
x.t("works","jvm-based");
x.t("calling","schemaservice.instance");
x.t("enable","olap_merge_threads");
x.t("enable","olap_compression_threads");
x.t("reduces","merge");
x.t("compress","input");
x.t("compress","data");
x.t("benefits","loading");
x.t("level","used");
x.t("database","overview");
x.t("applicationdefinition","calling");
x.t("header","content-encoding");
x.t("100","1000");
x.t("schema","data");
x.t("memory","cpu");
x.t("memory","resources");
x.t("olap_merge_threads","doradus.yaml");
x.t("olap_merge_threads","olap_compression_threads");
x.t("merging","instead");
x.t("merging","reduce");
x.t("merging","value");
x.t("option","auto-merge");
x.t("roughly","half");
x.t("documentation","highlights");
x.t("embedded","application");
x.t("longer","merge");
x.t("olap_compression_threads","doradus.yaml");
x.t("olap_compression_threads","freeing-up");
x.t("instances","background");
x.t("value","compression");
x.t("value","(9)");
x.t("value","selects");
x.t("value","number");
x.t("value","hour");
x.t("olapbatch","object");
x.t("depending","schema");
x.t("auto-merge","value");
x.t("services","need");
x.t("services","doradusserver");
x.t("transfer","parsing");
x.t("experiment","batch");
x.t("good","balance");
x.t("employs","maximum");
x.t("schedule","automatic");
x.t("data","size");
x.t("data","creating");
x.t("data","segments");
x.t("data","concurrent");
x.t("data","treat");
x.t("information","embedding");
x.t("gzip","compression");
x.t("gzip","add");
x.t("gzip","optimize");
x.t("freeing-up","cpu");
x.t("highlights","call");
x.t("treat","doradus");
x.t("application","multiple");
x.t("application","olap");
x.t("application","possibly");
x.t("application","obviously");
x.t("application","logic");
x.t("application","option");
x.t("olap_compression_level","doradus.yaml");
x.t("highest","value");
x.t("args","start");
x.t("args","string");
x.t("administration","documentation");
x.t("applications","updates");
x.t("applications","information");
x.t("call","doradusserver.startembedded");
x.t("startembedded","pass");
x.t("merge","time");
x.t("merge","frequency");
x.t("merge","experiment");
x.t("merge","data");
x.t("controls","gzip");
x.t("service","example");
x.t("schemaservice.instance",".getapplication");
x.t("used","compress");
x.t("used","data");
x.t("used","merge");
x.t("using","cpu");
x.t("using","disk");
x.t("using","gzip");
x.t("containing","lots");
x.t("containing","100");
x.t("setting","application");
x.t("hour","simplifies");
x.t("pass","com.dell.doradus.service.olap.olapservice");
x.t("pass","olapservice.instance");
x.t("load","time");
x.t("load","tasks");
x.t("load","thread");
x.t("load","services");
x.t("load","threads");
x.t("driver","embed");
x.t("therefore","lengthening");
x.t("embed","doradus");
x.t("embed","jvm");
x.t("doradusserver","startserverunblocked");
x.t(".getapplication","string");
x.t("even","single");
x.t("server","driver");
x.t("server","load");
x.t("object","pass");
x.t("update","batches");
x.t("threads","available");
x.t("threads","requires");
x.t("threads","whether");
x.t("threads","load");
x.t("resources","enable");
x.t("ratio","select");
}
