function FileData_Pairs(x)
{
x.t("latest","shard");
x.t("continually","substantial");
x.t("forward-moving","stream");
x.t("within","shard");
x.t("create","cross-shard");
x.t("xlink","fields");
x.t("cross-shard","relationships");
x.t("lots","shards");
x.t("substantial","processing");
x.t("best","data");
x.t("older","shards");
x.t("updates","latest");
x.t("updates","older");
x.t("updates","effect");
x.t("objects","linked");
x.t("objects","shard");
x.t("link","paths");
x.t("substantially","memory");
x.t("self-contained","mini");
x.t("xlinks","slower");
x.t("xlinks","sparingly");
x.t("overview","optimizing");
x.t("olap","works");
x.t("olap","database");
x.t("olap","applications");
x.t("requires","updates");
x.t("requires","substantially");
x.t("ideally","shard");
x.t("slower","requires");
x.t("optimizing","olap");
x.t("consumed","merging");
x.t("linked","objects");
x.t("fields","used");
x.t("stream","data");
x.t("shards","continually");
x.t("shards","xlinks");
x.t("processing","xlinks");
x.t("processing","consumed");
x.t("design","olap");
x.t("design","sharding");
x.t("design","schema");
x.t("shard","self-contained");
x.t("shard","occasional");
x.t("shard","e.g");
x.t("shard","data");
x.t("shard","efficient");
x.t("shard","traversing");
x.t("shard","merged");
x.t("shard","updated");
x.t("works","best");
x.t("added","latest");
x.t("sharding","strategy");
x.t("occasional","updates");
x.t("schema","design");
x.t("database","objects");
x.t("database","overview");
x.t("merging","olap");
x.t("mini","database");
x.t("e.g","today\u2019s");
x.t("today\u2019s","data");
x.t("data","forward-moving");
x.t("data","shard");
x.t("data","added");
x.t("data","updated");
x.t("strategy","requires");
x.t("strategy","ideal");
x.t("efficient","xlink");
x.t("applications","schema");
x.t("sparingly","ideally");
x.t("traversing","link");
x.t("used","create");
x.t("relationships","processing");
x.t("ideal","sharding");
x.t("merged","updates");
x.t("paths","within");
x.t("effect","update");
x.t("updated","shard");
x.t("update","lots");
}
