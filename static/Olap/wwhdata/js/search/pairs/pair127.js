function FileData_Pairs(x)
{
x.t("yyyy-mm-dd","background");
x.t("properties","rest");
x.t("properties","control");
x.t("available","options");
x.t("below","auto-merge");
x.t("/_shards/","{shard}");
x.t("compression","ratio");
x.t("200","response");
x.t("simultaneously","multiple");
x.t("background","merge");
x.t("deleting","obsolete");
x.t("periodically","checks");
x.t("obsolete","segment");
x.t("ongoing","queries");
x.t("summarized","below");
x.t("instance","task");
x.t("instance","merging");
x.t("instance","auto-merge");
x.t("mechanism","ensures");
x.t("ensures","instance");
x.t("ensures","shard");
x.t("batches","loaded");
x.t("batches","reason");
x.t("helps","prevent");
x.t("uses","task");
x.t("until","existing");
x.t("deletes","expired");
x.t("time","seconds");
x.t("merges","shard\u2019s");
x.t("response","returned");
x.t("hence","auto-merge");
x.t("(2)","perform");
x.t("unmerged","data");
x.t("however","doradus");
x.t("however","option");
x.t("multiple","tasks");
x.t("multiple","instances");
x.t("checks","deletes");
x.t("force-merge=","true");
x.t("detect","merge");
x.t("new","compression");
x.t("new","unmerged");
x.t("new","segment");
x.t("new","update");
x.t("updates","visible");
x.t("doradus","instance");
x.t("doradus","cannot");
x.t("doradus","instances");
x.t("doradus","process");
x.t("among","doradus");
x.t("command","uses");
x.t("command","due");
x.t("command","requires");
x.t("command","compatible");
x.t("command","post");
x.t("command","timeout=");
x.t("command","successful");
x.t("command","executes");
x.t("command","immediately");
x.t("command","returns");
x.t("command","affected");
x.t("doradus.yaml","file\u2019s");
x.t("indicates","time");
x.t("expire","even");
x.t("complete","command");
x.t("complete","setting");
x.t("normally","shard");
x.t("check","shard");
x.t("due","interaction");
x.t("false","option");
x.t("olap","rest");
x.t("specified","assigns");
x.t("specified","value");
x.t("specified","timestamp");
x.t("pre-merged","segments");
x.t("true","false");
x.t("requires","input");
x.t("synchronously","returning");
x.t("via","multiple");
x.t("via","doradus");
x.t("via","server");
x.t("name","shard");
x.t("name","{shard}");
x.t("expire-date=","timestamp");
x.t("wait","until");
x.t("wait","shard");
x.t("operation","shard");
x.t("previously","assigned");
x.t("returning","merge");
x.t("tasks","even");
x.t("perform","immediate");
x.t("perform","additional");
x.t("parameters","properties");
x.t("compatible","auto-merge");
x.t("loaded","given");
x.t("expired","shards");
x.t("restart","using");
x.t("rest","command");
x.t("rest","commands");
x.t("post","{application}");
x.t("segments","normally");
x.t("expiration","date");
x.t("segment","data");
x.t("allow","executing");
x.t("immediate","merge");
x.t("timeout=","seconds");
x.t("input","entity");
x.t("extra","second");
x.t("second","two");
x.t("shards","option");
x.t("store","shard\u2019s");
x.t("request","already");
x.t("commands","shard");
x.t("commands","merge");
x.t("queries","restarted");
x.t("queries","finish");
x.t("queries","merge");
x.t("error","indicating");
x.t("options","expire-date=");
x.t("executing","among");
x.t("executing","queries");
x.t("executing","query");
x.t("reason","re-merging");
x.t("file\u2019s","olap_compression_level");
x.t("control","merging");
x.t("presence","auto-merge");
x.t("shard","available");
x.t("shard","properties");
x.t("shard","batches");
x.t("shard","hence");
x.t("shard","new");
x.t("shard","command");
x.t("shard","expire");
x.t("shard","olap");
x.t("shard","specified");
x.t("shard","via");
x.t("shard","rest");
x.t("shard","store");
x.t("shard","(1)");
x.t("shard","task");
x.t("shard","already");
x.t("shard","merge");
x.t("shard","management");
x.t("shard","merged");
x.t("shard\u2019s","data");
x.t("indicating","shard");
x.t("cannot","detect");
x.t("requests","send");
x.t("interaction","task");
x.t("format","yyyy-mm-dd");
x.t("returned","updates");
x.t("owning","application's");
x.t("assigned","expire-date");
x.t("(1)","wait");
x.t("multi-node","environment");
x.t("task","periodically");
x.t("task","mechanism");
x.t("task","executing");
x.t("task","manager");
x.t("task","finishes");
x.t("assigns","expiration");
x.t("adds","extra");
x.t("given","shard");
x.t("merging","shard");
x.t("option","summarized");
x.t("option","ensures");
x.t("option","command");
x.t("option","shard");
x.t("option","adds");
x.t("option","merge");
x.t("option","forces");
x.t("performing","merge");
x.t("application's","name");
x.t("existing","task");
x.t("{application}","/_shards/");
x.t("{application}","owning");
x.t("instances","shard");
x.t("instances","result");
x.t("value","indicates");
x.t("value","format");
x.t("additional","check");
x.t("additional","merge");
x.t("restarted","force-merge=");
x.t("auto-merge","option");
x.t("auto-merge","auto-merge");
x.t("auto-merge","defined");
x.t("auto-merge","application");
x.t("auto-merge","merge");
x.t("already","performing");
x.t("already","merged");
x.t("send","doradus");
x.t("process","command");
x.t("manager","service");
x.t("abort","restart");
x.t("abort","404");
x.t("(3)","perform");
x.t("re-merging","shard");
x.t("corruption","shard");
x.t("optional","comma-separated");
x.t("data","new");
x.t("data","synchronously");
x.t("data","(3)");
x.t("data","used");
x.t("data","setting");
x.t("query","executing");
x.t("query","abort");
x.t("timeout","helps");
x.t("defined","doradus.yaml");
x.t("defined","merge");
x.t("result","corruption");
x.t("{params}","{application}");
x.t("{params}","optional");
x.t("case","using");
x.t("prevent","ongoing");
x.t("olap_compression_level","option");
x.t("successful","200");
x.t("application","option");
x.t("finish","case");
x.t("date","shard");
x.t("executes","immediately");
x.t("two","merge");
x.t("merge","complete");
x.t("merge","operation");
x.t("merge","shard");
x.t("merge","requests");
x.t("merge","task");
x.t("merge","performed");
x.t("timestamp","specified");
x.t("timestamp","value");
x.t("expire-date","shard");
x.t("immediately","request");
x.t("immediately","abort");
x.t("404","error");
x.t("management","commands");
x.t("following","rest");
x.t("used","allow");
x.t("entity","merges");
x.t("service","however");
x.t("service","perform");
x.t("finishes","(2)");
x.t("{shard}","name");
x.t("{shard}","{params}");
x.t("using","new");
x.t("using","pre-merged");
x.t("setting","auto-merge");
x.t("setting","timeout");
x.t("returns","merge");
x.t("merged","simultaneously");
x.t("merged","deleting");
x.t("merged","however");
x.t("merged","query");
x.t("merged","{params}");
x.t("merged","merge");
x.t("merged","following");
x.t("merged","even");
x.t("performed","via");
x.t("even","new");
x.t("even","previously");
x.t("even","multi-node");
x.t("forces","shard");
x.t("visible","queries");
x.t("affected","presence");
x.t("comma-separated","parameters");
x.t("seconds","specified");
x.t("seconds","wait");
x.t("update","batches");
x.t("ratio","defined");
x.t("server","instance");
}
