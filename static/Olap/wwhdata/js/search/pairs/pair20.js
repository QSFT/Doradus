function FileData_Pairs(x)
{
x.t("example","link");
x.t("example","define");
x.t("example","reflexive");
x.t("example","object");
x.t("below","table");
x.t("exist","created");
x.t("defines","relationship");
x.t("/fields","/table");
x.t("every","link");
x.t("shown","below");
x.t("owner","extent");
x.t("create","inter-object");
x.t("table","table");
x.t("table","name=");
x.t("table","points");
x.t("table","link");
x.t("table","relationship");
x.t("table","reside");
x.t("table","whose");
x.t("table","relationships");
x.t("always","collection");
x.t("always","reciprocal");
x.t("name=","directreports");
x.t("name=","participant");
x.t("name=","person");
x.t("name=","messageaddress");
x.t("name=","manager");
x.t("tables","example");
x.t("field","name=");
x.t("field","scalar");
x.t("field","value");
x.t("field","messageaddress");
x.t("friendship","always");
x.t("points","address");
x.t("points","called");
x.t("doesn\u2019t","exist");
x.t("hence","duplicates");
x.t("time","example");
x.t("property","ignored");
x.t("automatically","updated");
x.t("back","participant");
x.t("link","defines");
x.t("link","table");
x.t("link","field");
x.t("link","points");
x.t("link","automatically");
x.t("link","address");
x.t("link","fields");
x.t("link","inverse");
x.t("link","declaration");
x.t("link","inverse=");
x.t("link","values");
x.t("link","called");
x.t("link","updated");
x.t("relationship","person");
x.t("relationship","reflexive");
x.t("relationship","manager");
x.t("relationship","opposite");
x.t("objects","implicitly");
x.t("objects","belong");
x.t("reside","different");
x.t("table=","address");
x.t("table=","person");
x.t("referential","integrity");
x.t("directreports","/fields");
x.t("directreports","relationship");
x.t("directreports","table=");
x.t("olap","data");
x.t("direction","link");
x.t("participant","table");
x.t("participant","fields");
x.t("participant","object");
x.t("participant","side-effect");
x.t("_id","automatically-updated");
x.t("argue","friendship");
x.t("address","table");
x.t("address","type=");
x.t("address","object");
x.t("fields","always");
x.t("fields","field");
x.t("fields","link");
x.t("fields","olap");
x.t("fields","pointers");
x.t("sets","hence");
x.t("integrity","behavior");
x.t("extent","table");
x.t("extent","link");
x.t("point","back");
x.t("/table","example");
x.t("/table","link");
x.t("friends","self-reflexive");
x.t("messages","/fields");
x.t("messages","table");
x.t("messages","link");
x.t("collection","property");
x.t("connecting","owning");
x.t("scalar","fields");
x.t("different","tables");
x.t("person","table");
x.t("person","doesn\u2019t");
x.t("person","fields");
x.t("person","type=");
x.t("define","spouse");
x.t("spouse","friends");
x.t("may","argue");
x.t("inverse","link");
x.t("inverse","relationships");
x.t("ignored","link\u2019s");
x.t("ignored","relationships");
x.t("xml","shown");
x.t("added","messageaddress");
x.t("owning","participant");
x.t("reflexive","example");
x.t("reflexive","relationship");
x.t("ids","objects");
x.t("ids","link");
x.t("ids","removing");
x.t("inter-object","relationships");
x.t("whose","inverse");
x.t("value","(s)");
x.t("declaration","xml");
x.t("link\u2019s","owner");
x.t("link\u2019s","extent");
x.t("link\u2019s","values");
x.t("specific","address");
x.t("messageaddress","table=");
x.t("messageaddress","connecting");
x.t("messageaddress","owned");
x.t("messageaddress","corresponding");
x.t("type=","link");
x.t("manager","field");
x.t("manager","table=");
x.t("manager","directreports");
x.t("pointers","create");
x.t("(s)","link\u2019s");
x.t("inverse=","directreports");
x.t("inverse=","messages");
x.t("inverse=","manager");
x.t("data","model");
x.t("duplicates","ignored");
x.t("opposite","direction");
x.t("removing","ids");
x.t("values","sets");
x.t("values","ids");
x.t("implicitly","created");
x.t("owned","participant");
x.t("called","messages");
x.t("called","link\u2019s");
x.t("called","self-reflexive");
x.t("implicitly-created","object");
x.t("automatically-updated","link");
x.t("created","implicitly-created");
x.t("created","deleted");
x.t("created","object");
x.t("model","fields");
x.t("relationships","may");
x.t("relationships","called");
x.t("relationships","created");
x.t("relationships","relationships");
x.t("relationships","bi-directional");
x.t("corresponding","person");
x.t("bi-directional","link");
x.t("bi-directional","therefore");
x.t("deleted","adding");
x.t("adding","ids");
x.t("therefore","every");
x.t("behavior","objects");
x.t("self-reflexive","example");
x.t("self-reflexive","relationships");
x.t("belong","extent");
x.t("updated","time");
x.t("updated","point");
x.t("updated","inverse");
x.t("object","_id");
x.t("object","messages");
x.t("object","added");
x.t("object","specific");
x.t("object","updated");
x.t("side-effect","referential");
}
