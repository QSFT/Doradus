function FileData_Pairs(x)
{
x.t("equal","starting");
x.t("example","results");
x.t("parameter","specified");
x.t("below","example");
x.t("needs","determine");
x.t("table","multiple");
x.t("table","find");
x.t("table","search");
x.t("/doc","/docs");
x.t("range=","shard-from");
x.t("name=","_id");
x.t("name=","shards");
x.t("searched","shards=");
x.t("searched","result");
x.t("searched","ending");
x.t("searched","either");
x.t("field","name=");
x.t("necessary","shard");
x.t("/totalobjects","docs");
x.t("multiple","shards");
x.t("form","{application}");
x.t("/_duplicates","{params}");
x.t("objects","given");
x.t("element","containing");
x.t("element","object");
x.t("command","olap");
x.t("command","find");
x.t("command","optimized");
x.t("command","object");
x.t("shard-from","shard-to");
x.t("self-contained","graph");
x.t("list","shard");
x.t("found","shards");
x.t("group","contains");
x.t("results","element");
x.t("results","totalobjects");
x.t("olap","rest");
x.t("specified","range=");
x.t("specified","neither");
x.t("specified","shards");
x.t("name","table");
x.t("name","searched");
x.t("name","shards");
x.t("name","falls");
x.t("name","{table}");
x.t("name","given");
x.t("name","greater");
x.t("name","optional");
x.t("range","parameter");
x.t("neither","parameter");
x.t("_id","kunaqnj2ymmb07jhy9opow==");
x.t("find","duplicates");
x.t("determine","shards");
x.t("optimized","case");
x.t("kunaqnj2ymmb07jhy9opow==","/field");
x.t("rest","commands");
x.t("search","optional");
x.t("shards","below");
x.t("shards","searched");
x.t("shards","necessary");
x.t("shards","objects");
x.t("shards","range");
x.t("shards","whose");
x.t("shards","2014-01-01,2014-01-02");
x.t("shards","comma-separated");
x.t("commands","find");
x.t("sometimes","application");
x.t("falls","given");
x.t("shard","self-contained");
x.t("shard","name");
x.t("shard","names");
x.t("define","shards");
x.t("/field","/doc");
x.t("/field","field");
x.t("{table}","/_duplicates");
x.t("{table}","name");
x.t("starting","shard");
x.t("added","table");
x.t("given","table");
x.t("given","shards");
x.t("given","shard");
x.t("given","added");
x.t("whose","name");
x.t("greater","equal");
x.t("totalobjects","/totalobjects");
x.t("totalobjects","value");
x.t("{application}","{table}");
x.t("{application}","application");
x.t("/docs","/results");
x.t("value","docs");
x.t("docs","group");
x.t("docs","doc");
x.t("shards=","shards");
x.t("2014-01-01,2014-01-02","/field");
x.t("duplicates","command");
x.t("graph","sometimes");
x.t("optional","{params}");
x.t("optional","ending");
x.t("shard-to","starting");
x.t("query","results");
x.t("doc","field");
x.t("doc","element");
x.t("result","query");
x.t("application","needs");
x.t("application","name");
x.t("case","following");
x.t("{params}","define");
x.t("{params}","{application}");
x.t("following","form");
x.t("either","range");
x.t("either","shards");
x.t("ending","shard");
x.t("containing","totalobjects");
x.t("names","either");
x.t("names","(inclusive)");
x.t("object","found");
x.t("object","given");
x.t("comma-separated","list");
x.t("(inclusive)","searched");
x.t("contains","doc");
}
