function FileData_Pairs(x)
{
x.t("example","tenant");
x.t("within","keyspace");
x.t("independently","define");
x.t("columnfamily","holds");
x.t("background","tasks");
x.t("currently","used");
x.t("table","columnfamily");
x.t("table","_terms");
x.t("table","tenant");
x.t("table","application");
x.t("kinds","columnfamilies");
x.t("synchronization","records");
x.t("_terms","columnfamily");
x.t("replication","factor");
x.t("user","hellokitty_katniss");
x.t("user","doradus");
x.t("user","cassandra");
x.t("user","prefixed");
x.t("user","mapped");
x.t("user","ids");
x.t("user","called");
x.t("user","password");
x.t("keyspace","three");
x.t("keyspace","meaning");
x.t("keyspace","created");
x.t("hellokitty_katniss","allows");
x.t("provided","using");
x.t("aging","olap");
x.t("basic","auth");
x.t("providing","high");
x.t("owns","user");
x.t("owns","doradus");
x.t("doradus","spider");
x.t("doradus","olap");
x.t("doradus","rest");
x.t("doradus","task");
x.t("access","applications");
x.t("cassandra","user");
x.t("cassandra","keyspace");
x.t("cassandra","multi-tenant");
x.t("cassandra","tenant");
x.t("cassandra","nodes");
x.t("status","synchronization");
x.t("(rf)","applications");
x.t("exceed","number");
x.t("spider","application");
x.t("spider","applications");
x.t("availability","case");
x.t("olap","columnfamily");
x.t("olap","applications");
x.t("high","availability");
x.t("name","example");
x.t("name","data");
x.t("stored","columnfamilies");
x.t("stored","application-specific");
x.t("tasks","columnfamily");
x.t("tasks","data");
x.t("auth","tenant");
x.t("perform","background");
x.t("replicated","nodes");
x.t("records","used");
x.t("allows","different");
x.t("rest","commands");
x.t("prefixed","tenant");
x.t("three","columnfamilies");
x.t("metadata","stored");
x.t("metadata","applications");
x.t("tenants","independently");
x.t("tenants","tenant");
x.t("commands","tenant");
x.t("mapped","cassandra");
x.t("columnfamilies","within");
x.t("columnfamilies","currently");
x.t("columnfamilies","shared");
x.t("columnfamilies","two");
x.t("schemas","non-default");
x.t("options","tasks");
x.t("hellokitty","owns");
x.t("number","underlying");
x.t("underlying","cassandra");
x.t("tenant","user");
x.t("tenant","owns");
x.t("tenant","name");
x.t("tenant","mapped");
x.t("tenant","options");
x.t("tenant","tenant");
x.t("tenant","define");
x.t("tenant","named");
x.t("tenant","possesses");
x.t("tenant","applications");
x.t("tenant","mapping");
x.t("tenant","including");
x.t("multi-tenant","configuration");
x.t("indexing","data");
x.t("different","tenants");
x.t("define","replication");
x.t("define","user");
x.t("cannot","exceed");
x.t("node","failure");
x.t("task","manager");
x.t("ids","used");
x.t("thus","providing");
x.t("greater","ensure");
x.t("ensure","data");
x.t("configuration","tenant");
x.t("non-default","tenants");
x.t("named","hellokitty");
x.t("value","cannot");
x.t("holds","status");
x.t("holds","metadata");
x.t("holds","indexing");
x.t("holds","data");
x.t("holds","object");
x.t("specific","spider");
x.t("manager","service");
x.t("possesses","user");
x.t("nodes","thus");
x.t("nodes","values");
x.t("data","aging");
x.t("data","doradus");
x.t("data","stored");
x.t("data","replicated");
x.t("data","metadata");
x.t("data","specific");
x.t("meaning","keyspace");
x.t("shared","applications");
x.t("application","table");
x.t("values","greater");
x.t("case","node");
x.t("owned","tenant");
x.t("called","katniss");
x.t("katniss","corresponding");
x.t("two","kinds");
x.t("applications","columnfamily");
x.t("applications","user");
x.t("applications","value");
x.t("applications","data");
x.t("applications","application");
x.t("applications","owned");
x.t("factor","(rf)");
x.t("mapping","cassandra");
x.t("created","using");
x.t("used","doradus");
x.t("used","access");
x.t("used","spider");
x.t("service","perform");
x.t("corresponding","cassandra");
x.t("using","basic");
x.t("using","tenant");
x.t("password","provided");
x.t("including","schemas");
x.t("application-specific","columnfamilies");
x.t("object","data");
}
