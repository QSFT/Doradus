function FileData_Pairs(x)
{
x.t("example","tenant");
x.t("example","xml");
x.t("below","tenant");
x.t("properties","property");
x.t("properties","group");
x.t("properties","options");
x.t("properties","and/or");
x.t("properties","owner_organization");
x.t("parameter","doradus.yaml");
x.t("parameter","ks_defaults");
x.t("documenting","tenant");
x.t("creation","new");
x.t("managing","tenants");
x.t("shown","below");
x.t("shown","above");
x.t("/options","properties");
x.t("within","tenant");
x.t("within","ks_defaults");
x.t("full","definition");
x.t("password=","skanks");
x.t("password=","everdeen");
x.t("password=","gus");
x.t("currently","option");
x.t("currently","following");
x.t("create","new");
x.t("create","tenant");
x.t("required","options");
x.t("name=","skimbleshanks");
x.t("name=","_createdon");
x.t("name=","hellokitty");
x.t("name=","replicationfactor");
x.t("name=","katniss");
x.t("name=","asparagus");
x.t("name=","owner_organization");
x.t("/user","user");
x.t("/user","/users");
x.t("replication","factor");
x.t("storing","information");
x.t("user","name=");
x.t("user","ids/passwords");
x.t("user","perform");
x.t("user","post");
x.t("user","random");
x.t("user","ids");
x.t("user","named");
x.t("user","created");
x.t("user","used");
x.t("user","password");
x.t("user","names");
x.t("/tenant","tenant");
x.t("/tenant","json");
x.t("provided","optionally");
x.t("keyspace","initialized");
x.t("keyspace","defaults");
x.t("keyspace","created");
x.t("modified","_createdon");
x.t("skimbleshanks","password=");
x.t("skimbleshanks","password");
x.t("response","includes");
x.t("response","returned");
x.t("llc","/property");
x.t("however","property");
x.t("_createdon","property");
x.t("_createdon","2015-06-17");
x.t("property","name=");
x.t("property","specified");
x.t("property","name");
x.t("property","timestamp");
x.t("property","names");
x.t("default","currently");
x.t("put","post");
x.t("ids/passwords","cassandra");
x.t("needed","post");
x.t("new","user");
x.t("new","keyspace");
x.t("new","cassandra");
x.t("new","tenant");
x.t("new","tenant\u2019s");
x.t("access","cassandra");
x.t("doradus","metadata");
x.t("command","post");
x.t("command","define");
x.t("command","include");
x.t("command","received");
x.t("command","returns");
x.t("/permissions","/user");
x.t("skanks","permissions");
x.t("doradus.yaml","parameter");
x.t("doradus.yaml","option");
x.t("license","keys");
x.t("recovered","needed");
x.t("document","format");
x.t("includes","system-assigned");
x.t("/option","/options");
x.t("cassandra","user");
x.t("cassandra","keyspace");
x.t("cassandra","cluster");
x.t("list","permission");
x.t("system-assigned","_createdon");
x.t("/users","/tenant");
x.t("group","storing");
x.t("group","sets");
x.t("group","present");
x.t("group","used");
x.t("organization","license");
x.t("issued","create");
x.t("initialized","doradus");
x.t("specified","new");
x.t("specified","match");
x.t("specified","used");
x.t("specified","comma-separated");
x.t("defaults","doradus.yaml");
x.t("creating","new");
x.t("name","user");
x.t("name","hellokitty");
x.t("name","tenant");
x.t("name","option");
x.t("name","value");
x.t("name","already");
x.t("name","optionally");
x.t("system-defined","tenant");
x.t("stored","within");
x.t("definition","written");
x.t("definition","including");
x.t("identifiers","new");
x.t("tasks","tenant\u2019s");
x.t("perform","put");
x.t("perform","commands");
x.t("{user}","user");
x.t("direct","access");
x.t("minimally","identifiers");
x.t("exists","409");
x.t("mnemonics","permissions");
x.t("rest","command");
x.t("post","command");
x.t("post","commands");
x.t("post","/_tenants");
x.t("everdeen","user");
x.t("everdeen","permissions");
x.t("everdeen","asparagus");
x.t("allows","user");
x.t("sets","replication");
x.t("sets","system-defined");
x.t("/property","property");
x.t("/property","/properties");
x.t("permissions","properties");
x.t("permissions","new");
x.t("permissions","specified");
x.t("permissions","supported");
x.t("permissions","read");
x.t("permissions","defined");
x.t("permissions","users");
x.t("permissions","append");
x.t("replication_factor","defined");
x.t("tenants","cassandra");
x.t("tenants","creating");
x.t("begin","underscore");
x.t("present","initial");
x.t("random","user");
x.t("random","password");
x.t("metadata","columnfamilies");
x.t("body","minimally");
x.t("supported","replicationfactor");
x.t("supported","permission");
x.t("commands","issued");
x.t("commands","post");
x.t("commands","read");
x.t("commands","applications");
x.t("commands","update");
x.t("occurs","new");
x.t("options","example");
x.t("options","properties");
x.t("options","currently");
x.t("options","group");
x.t("options","option");
x.t("options","replicationfactor");
x.t("options","using");
x.t("columnfamilies","applications");
x.t("hellokitty","required");
x.t("hellokitty","options");
x.t("number","nodes");
x.t("underlying","cassandra");
x.t("written","applications");
x.t("tenant","name=");
x.t("tenant","user");
x.t("tenant","modified");
x.t("tenant","new");
x.t("tenant","command");
x.t("tenant","creating");
x.t("tenant","name");
x.t("tenant","random");
x.t("tenant","options");
x.t("tenant","multi-tenant");
x.t("tenant","larger");
x.t("tenant","users");
x.t("tenant","created");
x.t("tenant","using");
x.t("tenant","company");
x.t("tenant","append");
x.t("multi-tenant","configuration");
x.t("tenant\u2019s","full");
x.t("tenant\u2019s","name");
x.t("tenant\u2019s","definition");
x.t("cluster","properties");
x.t("underscore","users");
x.t("define","tenant");
x.t("define","initial");
x.t("cannot","begin");
x.t("unique","across");
x.t("accidental","creation");
x.t("xml","shown");
x.t("ks_defaults","parameter");
x.t("ks_defaults","cql");
x.t("format","shown");
x.t("match","existing");
x.t("returned","prevents");
x.t("initial","user");
x.t("initial","users");
x.t("assigned","default");
x.t("{tenant}","{user}");
x.t("cats","llc");
x.t("cats","/property");
x.t("cats","users");
x.t("ids","passwords");
x.t("message","body");
x.t("option","name=");
x.t("option","sets");
x.t("option","supported");
x.t("option","replicationfactor");
x.t("given","name");
x.t("given","tenant");
x.t("and/or","tenant");
x.t("and/or","users");
x.t("gus","permissions");
x.t("existing","value");
x.t("configuration","managing");
x.t("include","message");
x.t("keys","property");
x.t("cql","commands");
x.t("replicationfactor","properties");
x.t("replicationfactor","/option");
x.t("replicationfactor","specified");
x.t("replicationfactor","overrides");
x.t("value","create");
x.t("value","used");
x.t("named","{tenant}");
x.t("already","exists");
x.t("already","used");
x.t("read","new");
x.t("read","/permissions");
x.t("read","permission");
x.t("larger","number");
x.t("nodes","underlying");
x.t("data","stored");
x.t("information","tenant");
x.t("defined","within");
x.t("defined","assigned");
x.t("defined","following");
x.t("defined","password");
x.t("semantics","options");
x.t("received","given");
x.t("received","following");
x.t("2015-06-17","15:41:40");
x.t("katniss","password=");
x.t("katniss","password");
x.t("permission","mnemonics");
x.t("permission","allows");
x.t("permission","restricts");
x.t("above","response");
x.t("users","user");
x.t("users","group");
x.t("users","specified");
x.t("users","and/or");
x.t("users","defined");
x.t("users","katniss");
x.t("json","hellokitty");
x.t("optionally","command");
x.t("optionally","permissions");
x.t("asparagus","password=");
x.t("asparagus","password");
x.t("factor","data");
x.t("applications","within");
x.t("applications","recovered");
x.t("applications","tasks");
x.t("prevents","accidental");
x.t("created","example");
x.t("created","rest");
x.t("created","random");
x.t("created","tenant");
x.t("created","given");
x.t("created","using");
x.t("/properties","users");
x.t("timestamp","documenting");
x.t("following","permissions");
x.t("following","occurs");
x.t("following","semantics");
x.t("used","however");
x.t("used","new");
x.t("used","direct");
x.t("used","define");
x.t("using","document");
x.t("using","name");
x.t("using","tenant");
x.t("passwords","permissions");
x.t("conflict","response");
x.t("password","provided");
x.t("password","skanks");
x.t("password","everdeen");
x.t("password","permissions");
x.t("password","gus");
x.t("overrides","replication_factor");
x.t("company","organization");
x.t("restricts","user");
x.t("across","tenants");
x.t("returns","new");
x.t("15:41:40","/property");
x.t("append","skimbleshanks");
x.t("append","/permissions");
x.t("append","permission");
x.t("names","cannot");
x.t("names","unique");
x.t("including","name");
x.t("409","conflict");
x.t("/_tenants","command");
x.t("owner_organization","cats");
x.t("comma-separated","list");
x.t("update","permission");
}
