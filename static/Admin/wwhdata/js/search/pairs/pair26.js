function FileData_Pairs(x)
{
x.t("example","xml");
x.t("below","tenant");
x.t("parameter","doradus.yaml");
x.t("parameter","ks_defaults");
x.t("creation","idempotent");
x.t("exist","following");
x.t("managing","tenants");
x.t("shown","below");
x.t("shown","above");
x.t("/options","/tenant");
x.t("full","access");
x.t("full","definition");
x.t("password=","everdeen");
x.t("currently","supported");
x.t("create","new");
x.t("required","optionally");
x.t("name=","hellokitty");
x.t("name=","replicationfactor");
x.t("name=","katniss");
x.t("user","name=");
x.t("user","ids/passwords");
x.t("user","named");
x.t("user","used");
x.t("user","password");
x.t("user","names");
x.t("/tenant","json");
x.t("keyspace","cassandra");
x.t("keyspace","initialized");
x.t("keyspace","defaults");
x.t("keyspace","created");
x.t("response","returned");
x.t("ids/passwords","options");
x.t("ids/passwords","authorize");
x.t("needed","post");
x.t("new","keyspace");
x.t("new","random");
x.t("new","tenant");
x.t("new","tenant\u2019s");
x.t("access","new");
x.t("access","cassandra");
x.t("command","post");
x.t("command","define");
x.t("command","include");
x.t("command","received");
x.t("command","returns");
x.t("doradus.yaml","parameter");
x.t("doradus.yaml","post");
x.t("recovered","needed");
x.t("document","format");
x.t("/option","/options");
x.t("cassandra","user");
x.t("cassandra","keyspace");
x.t("/users","options");
x.t("group","allowed");
x.t("group","tenant");
x.t("issued","create");
x.t("initialized","creating");
x.t("specified","new");
x.t("specified","used");
x.t("defaults","doradus.yaml");
x.t("creating","new");
x.t("creating","applications");
x.t("name","user");
x.t("name","hellokitty");
x.t("name","option");
x.t("name","optionally");
x.t("definition","written");
x.t("definition","including");
x.t("identifiers","new");
x.t("tasks","columnfamilies");
x.t("{user}","user");
x.t("direct","access");
x.t("minimally","identifiers");
x.t("exists","409");
x.t("rest","command");
x.t("post","command");
x.t("post","request");
x.t("post","/_tenants");
x.t("everdeen","/users");
x.t("everdeen","options");
x.t("everdeen","users");
x.t("replication_factor","defined");
x.t("chosen","tenant");
x.t("tenants","cassandra");
x.t("tenants","creating");
x.t("request","produce");
x.t("random","user");
x.t("body","minimally");
x.t("supported","replicationfactor");
x.t("error","response");
x.t("error","tenant");
x.t("commands","issued");
x.t("occurs","new");
x.t("options","example");
x.t("options","group");
x.t("options","option");
x.t("options","replicationfactor");
x.t("options","using");
x.t("allowed","option");
x.t("means","tenant");
x.t("columnfamilies","tenant\u2019s");
x.t("hellokitty","required");
x.t("hellokitty","users");
x.t("written","applications");
x.t("tenant","creation");
x.t("tenant","name=");
x.t("tenant","user");
x.t("tenant","new");
x.t("tenant","creating");
x.t("tenant","name");
x.t("tenant","options");
x.t("tenant","multi-tenant");
x.t("tenant","cql");
x.t("tenant","user/password");
x.t("tenant","already");
x.t("tenant","users");
x.t("tenant","created");
x.t("multi-tenant","configuration");
x.t("tenant\u2019s","full");
x.t("tenant\u2019s","name");
x.t("tenant\u2019s","definition");
x.t("define","tenant");
x.t("unique","across");
x.t("xml","shown");
x.t("ks_defaults","parameter");
x.t("ks_defaults","tenant");
x.t("returned","means");
x.t("format","shown");
x.t("{tenant}","{user}");
x.t("message","body");
x.t("option","currently");
x.t("option","name=");
x.t("option","replicationfactor");
x.t("option","overrides");
x.t("given","tenant");
x.t("e.g","katniss");
x.t("and/or","tenant");
x.t("configuration","managing");
x.t("include","message");
x.t("cql","commands");
x.t("replicationfactor","new");
x.t("replicationfactor","/option");
x.t("replicationfactor","specified");
x.t("replicationfactor","option");
x.t("user/password","defined");
x.t("named","{tenant}");
x.t("already","exist");
x.t("already","exists");
x.t("idempotent","post");
x.t("defined","ks_defaults");
x.t("defined","e.g");
x.t("received","given");
x.t("katniss","password=");
x.t("katniss","everdeen");
x.t("katniss","password");
x.t("users","user");
x.t("users","group");
x.t("users","specified");
x.t("users","and/or");
x.t("users","katniss");
x.t("json","hellokitty");
x.t("optionally","command");
x.t("optionally","tenant");
x.t("applications","recovered");
x.t("applications","tasks");
x.t("created","rest");
x.t("created","using");
x.t("following","occurs");
x.t("used","new");
x.t("used","direct");
x.t("conflict","error");
x.t("using","document");
x.t("using","tenant");
x.t("password","everdeen");
x.t("password","chosen");
x.t("overrides","replication_factor");
x.t("across","tenants");
x.t("returns","new");
x.t("names","unique");
x.t("409","conflict");
x.t("including","name");
x.t("produce","error");
x.t("/_tenants","command");
x.t("authorize","full");
}
