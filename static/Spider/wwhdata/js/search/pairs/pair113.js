function FileData_Pairs(x)
{
x.t("example","suppose");
x.t("base64","element");
x.t("base64","attribute");
x.t("base64","qujdaa==");
x.t("within","xml");
x.t("base64-encoded","application");
x.t("name=","foo");
x.t("creates","xml");
x.t("field","name=");
x.t("field","value");
x.t("0x00","valid");
x.t("hence","field");
x.t("text","fields");
x.t("doradus","creates");
x.t("doradus","allows");
x.t("element","example");
x.t("element","whose");
x.t("element","value");
x.t("element","content");
x.t("certain","characters");
x.t("xd7ff","xe000-");
x.t("add","encoding=");
x.t("api","overview");
x.t("spider","rest");
x.t("overview","illegal");
x.t("base64-encodes","entire");
x.t("x10ffff","output");
x.t("outside","base64-encodes");
x.t("follows","field");
x.t("x20-","xd7ff");
x.t("encoding=","base64");
x.t("rest","api");
x.t("rest","commands");
x.t("allows","text");
x.t("fields","unicode");
x.t("allow","element");
x.t("entire","element");
x.t("characters","base64-encoded");
x.t("characters","outside");
x.t("characters","characters");
x.t("characters","allowed");
x.t("characters","xml");
x.t("contain","certain");
x.t("contain","characters");
x.t("attribute","encoding=");
x.t("attribute","corresponding");
x.t("input","xml");
x.t("commands","rest");
x.t("xfffd","x10000-");
x.t("suppose","field");
x.t("allowed","within");
x.t("unicode","characters");
x.t("unicode","value");
x.t("/field","similarly");
x.t("xml","hence");
x.t("xml","element");
x.t("xml","allow");
x.t("xml","characters");
x.t("xml","message");
x.t("xml","content");
x.t("returned","follows");
x.t("abc\\u0000","character");
x.t("invalid","xml");
x.t("adds","attribute");
x.t("message","doradus");
x.t("message","element");
x.t("illegal","characters");
x.t("xe000-","xfffd");
x.t("x10000-","x10ffff");
x.t("whose","content");
x.t("value","returned");
x.t("value","abc\\u0000");
x.t("value","adds");
x.t("value","contains");
x.t("although","doradus");
x.t("valid","xml");
x.t("foo","encoding=");
x.t("output","message");
x.t("qujdaa==","/field");
x.t("application","add");
x.t("character","hex");
x.t("following","x20-");
x.t("hex","0x00");
x.t("corresponding","element");
x.t("similarly","input");
x.t("content","spider");
x.t("content","contain");
x.t("content","illegal");
x.t("content","although");
x.t("content","following");
x.t("content","contains");
x.t("contains","unicode");
x.t("contains","invalid");
}
