function FileData_Pairs(x)
{
x.t("example","consider");
x.t("indexed","example");
x.t("indexed","always");
x.t("indexed","once");
x.t("indexed","hence");
x.t("indexed","text");
x.t("indexed","analyzer");
x.t("indexed","term");
x.t("indexed","therefore");
x.t("below","field");
x.t("every","scalar");
x.t("textanalyzer","suppose");
x.t("textanalyzer","nullanalyzer");
x.t("textanalyzer","unique");
x.t("create","index");
x.t("alternate","analyzer");
x.t("alternate","analyzers");
x.t("binary","fields");
x.t("binary","nullanalyzer");
x.t("always","nullanalyzer");
x.t("once","happy");
x.t("quotes:happy","select");
x.t("name=","quotes");
x.t("uses","analyzers");
x.t("field","indexed");
x.t("field","name=");
x.t("field","html");
x.t("field","type");
x.t("field","explicitly");
x.t("field","single");
x.t("field","indexing");
x.t("field","value");
x.t("field","defined");
x.t("field","values");
x.t("field","management");
x.t("html","text");
x.t("type","default");
x.t("type","declare");
x.t("type","optionally");
x.t("explicitly","declare");
x.t("time","life");
x.t("hence","equality");
x.t("tokenizes","field");
x.t("integeranalyzer","nullanalyzer");
x.t("dateanalyzer","nullanalyzer");
x.t("property","doradus");
x.t("property","spider");
x.t("property","analyzer");
x.t("property","assigns");
x.t("default","alternate");
x.t("default","analyzer");
x.t("text","textanalyzer");
x.t("text","binary");
x.t("text","fields");
x.t("text","collection=");
x.t("doradus","spider");
x.t("single","value");
x.t("details","analyzer");
x.t("it's","happy");
x.t("determines","whether");
x.t("assign","opaquetextanalyzer");
x.t("assign","htmlanalyzer");
x.t("opaquetextanalyzer","index");
x.t("opaquetextanalyzer","whole");
x.t("opaquetextanalyzer","htmlanalyzer");
x.t("spider","uses");
x.t("spider","data");
x.t("declare","analyzer");
x.t("declare","nullanalyzer");
x.t("true","analyzer=");
x.t("analyzer","alternate");
x.t("analyzer","tokenizes");
x.t("analyzer","property");
x.t("analyzer","determines");
x.t("analyzer","opaquetextanalyzer");
x.t("analyzer","optimized");
x.t("analyzer","allowed");
x.t("analyzer","described");
x.t("analyzer","controls");
x.t("analyzer","generates");
x.t("searches","quotes=");
x.t("field\u2019s","value");
x.t("boolean","booleananalyzer");
x.t("determine","store");
x.t("optimized","scalar\u2019s");
x.t("records","words");
x.t("fields","indexed");
x.t("fields","assign");
x.t("fields","analyzer");
x.t("fields","scalar");
x.t("aspects","scalar");
x.t("entire","field");
x.t("three","quotes");
x.t("store","index");
x.t("extraction","values");
x.t("quotes","type=");
x.t("quotes","values");
x.t("collection=","true");
x.t("suppose","object");
x.t("next","sections");
x.t("allowed","chart");
x.t("long","integeranalyzer");
x.t("life","beach");
x.t("select","object");
x.t("analyzers","text");
x.t("analyzers","determine");
x.t("nullanalyzer","every");
x.t("nullanalyzer","binary");
x.t("nullanalyzer","opaquetextanalyzer");
x.t("nullanalyzer","boolean");
x.t("nullanalyzer","long");
x.t("nullanalyzer","scalar");
x.t("nullanalyzer","prevent");
x.t("nullanalyzer","timestamp");
x.t("scalar","field");
x.t("scalar","fields");
x.t("indexing","every");
x.t("indexing","analyzer");
x.t("scalar\u2019s","field");
x.t("chart","below");
x.t("whether","field\u2019s");
x.t("words","analyzer");
x.t("beach","indexed");
x.t("beach","it's");
x.t("beach","analyzer");
x.t("unique","term");
x.t("index","field");
x.t("index","records");
x.t("index","entire");
x.t("index","scalar");
x.t("instead","tokenized");
x.t("assigned","default");
x.t("whole","value");
x.t("whole","values");
x.t("term","indexed");
x.t("term","extraction");
x.t("term","clause");
x.t("assigns","default");
x.t("schema","assigned");
x.t("won\u2019t","details");
x.t("consider","following");
x.t("analyzer=","textanalyzer");
x.t("value","indexed");
x.t("value","life");
x.t("value","instead");
x.t("value","used");
x.t("booleananalyzer","nullanalyzer");
x.t("declaration","field");
x.t("quotes=","life");
x.t("type=","text");
x.t("clauses","quotes:happy");
x.t("data","model");
x.t("inserted","following");
x.t("defined","schema");
x.t("values","indexed");
x.t("values","time");
x.t("prevent","field");
x.t("described","next");
x.t("two","aspects");
x.t("integer","integeranalyzer");
x.t("optionally","field");
x.t("controls","two");
x.t("timestamp","dateanalyzer");
x.t("model","fields");
x.t("management","indexing");
x.t("used","create");
x.t("following","three");
x.t("following","declaration");
x.t("clause","select");
x.t("clause","won\u2019t");
x.t("hour","using");
x.t("using","textanalyzer");
x.t("terms","field");
x.t("terms","assign");
x.t("therefore","phrase");
x.t("tokenized","terms");
x.t("generates","terms");
x.t("happy","whole");
x.t("happy","hour");
x.t("equality","searches");
x.t("equality","clause");
x.t("htmlanalyzer","index");
x.t("htmlanalyzer","integer");
x.t("object","term");
x.t("object","inserted");
x.t("object","equality");
x.t("phrase","clauses");
}
