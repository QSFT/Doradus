function FileData_Pairs(x)
{
x.t("supports","dql");
x.t("supports","core");
x.t("searching","full");
x.t("searching","stored-only");
x.t("extensions","spider");
x.t("extensions","leverage");
x.t("example","addition");
x.t("available","storage");
x.t("provide","efficient");
x.t("indexed","objects");
x.t("full","partial");
x.t("within","table");
x.t("roll-up","metric");
x.t("currently","runs");
x.t("table","different");
x.t("table","define");
x.t("table","including");
x.t("experience","performance");
x.t("background","tasks");
x.t("dql","object");
x.t("fully-inverted","indexing");
x.t("performs","group-level");
x.t("trees","used");
x.t("field","analyzers");
x.t("field","clauses");
x.t("field","used");
x.t("selectively","disabled");
x.t("providing","high-value");
x.t("(dql)","extends");
x.t("vectors","used");
x.t("aging","field");
x.t("aging","spider");
x.t("aging","performed");
x.t("time-based","shards");
x.t("time-based","sharding");
x.t("delete","expired");
x.t("multiple","grouping");
x.t("text","fields");
x.t("partial","values");
x.t("automatically","delete");
x.t("automatically","splits");
x.t("doradus","currently");
x.t("doradus","aggregate");
x.t("doradus","data");
x.t("doradus","server");
x.t("objects","table");
x.t("objects","grows");
x.t("objects","dictionaries");
x.t("objects","data");
x.t("retrieved","without");
x.t("dynamically-added","fields");
x.t("single","pass");
x.t("link","fields");
x.t("top","cassandra");
x.t("top","nosql");
x.t("cassandra","database");
x.t("benefit","specific");
x.t("high-value","features");
x.t("spider","supports");
x.t("spider","available");
x.t("spider","overview");
x.t("spider","allows");
x.t("spider","fully");
x.t("spider","database");
x.t("spider","extends");
x.t("spider","offers");
x.t("overview","doradus");
x.t("overview","spider");
x.t("features","fully-inverted");
x.t("features","compound");
x.t("features","database");
x.t("per-object","basis");
x.t("splits","indexing");
x.t("olap","service");
x.t("range","searching");
x.t("stored","retrieved");
x.t("maintain","efficient");
x.t("searches","fields");
x.t("performance","issues");
x.t("performance","time-oriented");
x.t("tasks","definable");
x.t("definable","schedules");
x.t("millions","fields");
x.t("millions","beyond");
x.t("aggregate","queries");
x.t("aggregate","grouping");
x.t("perform","searches");
x.t("trie","trees");
x.t("provides","extensions");
x.t("compound","composite");
x.t("compound","grouping");
x.t("expired","objects");
x.t("allows","table");
x.t("allows","field");
x.t("allows","metric");
x.t("allows","different");
x.t("allows","persistence");
x.t("basis","dynamically-added");
x.t("records","time-based");
x.t("search","performance");
x.t("fields","within");
x.t("fields","objects");
x.t("fields","stored");
x.t("fields","trie");
x.t("fields","fields");
x.t("fields","techniques");
x.t("fields","indexing");
x.t("fields","fully");
x.t("fields","extended");
x.t("fields","query");
x.t("fields","predefined");
x.t("fields","leverage");
x.t("fields","object");
x.t("sets","fields");
x.t("sets","using");
x.t("composite","grouping");
x.t("addition","field-specific");
x.t("metric","functions");
x.t("metric","computations");
x.t("nosql","database");
x.t("techniques","provide");
x.t("techniques","experience");
x.t("techniques","benefit");
x.t("functions","computed");
x.t("shards","maintain");
x.t("queries","provides");
x.t("queries","scalar");
x.t("queries","special");
x.t("grows","millions");
x.t("space","dynamic");
x.t("issues","number");
x.t("analyzers","index");
x.t("computed","multiple");
x.t("number","indexed");
x.t("indexing","example");
x.t("indexing","selectively");
x.t("indexing","spider");
x.t("indexing","records");
x.t("indexing","techniques");
x.t("indexing","space");
x.t("indexing","storage");
x.t("scalar","link");
x.t("scalar","fields");
x.t("dictionaries","term");
x.t("computations","non-leaf");
x.t("time-oriented","queries");
x.t("different","sets");
x.t("different","storage");
x.t("unique","features");
x.t("field-specific","term");
x.t("define","timestamp");
x.t("offering","indexing");
x.t("language","(dql)");
x.t("index","scalar");
x.t("non-leaf","groups");
x.t("types","spider");
x.t("added","dynamically");
x.t("term","vectors");
x.t("term","phrase");
x.t("disabled","scalar");
x.t("fully","supports");
x.t("fully","indexed");
x.t("groups","table-level");
x.t("sharding","automatically");
x.t("sharding","traditional");
x.t("sharding","table-level");
x.t("database","providing");
x.t("database","overview");
x.t("database","architecture");
x.t("database","easier");
x.t("persistence","engines");
x.t("schema","added");
x.t("extended","aggregate");
x.t("architecture","allows");
x.t("easier","valuable");
x.t("core","doradus");
x.t("specific","application");
x.t("extends","doradus");
x.t("extends","following");
x.t("runs","top");
x.t("services","olap");
x.t("services","used");
x.t("clauses","spider");
x.t("clauses","perform");
x.t("dynamic","fields");
x.t("inverted","indexing");
x.t("query","extensions");
x.t("query","techniques");
x.t("query","language");
x.t("data","aging");
x.t("data","composite");
x.t("data","model");
x.t("group-level","roll-up");
x.t("traditional","inverted");
x.t("application","types");
x.t("application","runs");
x.t("values","range");
x.t("efficient","searching");
x.t("efficient","search");
x.t("beyond","spider");
x.t("predefined","schema");
x.t("applications","doradus");
x.t("numeric","timestamp");
x.t("leverage","fully-inverted");
x.t("leverage","time-based");
x.t("valuable","applications");
x.t("timestamp","aging");
x.t("timestamp","fields");
x.t("engines","architecture");
x.t("storage","services");
x.t("storage","query");
x.t("used","text");
x.t("used","automatically");
x.t("used","offering");
x.t("used","numeric");
x.t("service","spider");
x.t("model","query");
x.t("following","unique");
x.t("offers","field");
x.t("offers","table-level");
x.t("special","compound");
x.t("using","single");
x.t("grouping","performs");
x.t("grouping","spider");
x.t("grouping","features");
x.t("grouping","allows");
x.t("grouping","sets");
x.t("pass","data");
x.t("stored-only","fields");
x.t("without","consuming");
x.t("performed","background");
x.t("including","dynamically-added");
x.t("table-level","aging");
x.t("table-level","time-based");
x.t("table-level","sharding");
x.t("even","millions");
x.t("equality","clauses");
x.t("server","application");
x.t("consuming","indexing");
x.t("dynamically","per-object");
x.t("object","aggregate");
x.t("object","even");
x.t("phrase","equality");
}
