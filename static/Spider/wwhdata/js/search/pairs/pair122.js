function FileData_Pairs(x)
{
x.t("example","http/1.1");
x.t("example","batch-result");
x.t("example","link");
x.t("example","input");
x.t("example","scalar");
x.t("example","doc");
x.t("included","value");
x.t("included","doc");
x.t("plain","text");
x.t("exist","application\u2019s");
x.t("below","participants");
x.t("below","batch");
x.t("below","object");
x.t("bca3bq4hgaa","senddate");
x.t("bca3bq4hgaa","/field");
x.t("bca3bq4hgaa","doc");
x.t("transactions","existing");
x.t("no-op","binary");
x.t("base64","hex");
x.t("has_updates","element");
x.t("has_updates","true");
x.t("bca3bq4hgab","senddate");
x.t("bca3bq4hgab","/field");
x.t("fijoqphajqqjeueod","ih8q==");
x.t("simplified","name/value");
x.t("shown","below");
x.t("shown","doc");
x.t("flushed","count");
x.t("201","created");
x.t("every","object");
x.t("comment","updates");
x.t("http/1.1","400");
x.t("table","unknown");
x.t("table","objects");
x.t("table","name");
x.t("table","application");
x.t("table","implicitly");
x.t("senddate","2010-07-17");
x.t("senddate","2010-07-18");
x.t("copens","silk");
x.t("leaf","fields");
x.t("seagull","citizens");
x.t("/doc","add");
x.t("/doc","/docs");
x.t("/doc","doc");
x.t("name/value","syntax");
x.t("always","add");
x.t("binary","field");
x.t("binary","fields");
x.t("name=","senddate");
x.t("name=","participants");
x.t("name=","subject");
x.t("name=","sender");
x.t("name=","size");
x.t("name=","_id");
x.t("name=","internalrecipients");
x.t("name=","recipients");
x.t("name=","tags");
x.t("aafe9rf","bca3bq4hgaa");
x.t("aafe9rf","bca3bq4hgab");
x.t("batches","arbitrarily");
x.t("batches","require");
x.t("batches","stored");
x.t("batches","described");
x.t("participants","field");
x.t("participants","recipients");
x.t("reaches","batch_mutation_threshold");
x.t("preserves","idempotent");
x.t("field","example");
x.t("field","always");
x.t("field","name=");
x.t("field","internalrecipients");
x.t("field","assigned");
x.t("field","defined");
x.t("field","values");
x.t("field","update");
x.t("subject","bloodily");
x.t("subject","synopses");
x.t("/value","/add");
x.t("/value","value");
x.t("uses","simplified");
x.t("declared","schema");
x.t("declared","using");
x.t("05:22:35","size");
x.t("05:22:35","/field");
x.t("sender","fijoqphajqqjeueod");
x.t("sender","wwr7yzik2p1rri6/qsepxg==");
x.t("sender","assigned");
x.t("arbitrarily","large");
x.t("batch","batch");
x.t("batch","batch-result");
x.t("batch","new");
x.t("batch","size");
x.t("batch","command");
x.t("batch","add");
x.t("batch","spider");
x.t("batch","commands");
x.t("batch","held");
x.t("batch","added");
x.t("batch","rejected");
x.t("batch","docs");
x.t("batch","updated");
x.t("customer","/value");
x.t("customer","internalrecipients");
x.t("bloodily","douches");
x.t("batch-result","status");
x.t("change","actually");
x.t("hence","large");
x.t("response","response");
x.t("response","contains");
x.t("autotables","false");
x.t("autotables","option");
x.t("unknown","error");
x.t("multiple","sub-batch");
x.t("multiple","values");
x.t("however","leaf");
x.t("require","memory");
x.t("count","reaches");
x.t("text","message");
x.t("new","objects");
x.t("objects","batch");
x.t("objects","added");
x.t("objects","whose");
x.t("objects","already");
x.t("link","field");
x.t("link","sender");
x.t("link","fields");
x.t("single","value");
x.t("element","included");
x.t("element","objects");
x.t("element","indicates");
x.t("element","given");
x.t("element","absent");
x.t("element","object");
x.t("doradus","status");
x.t("updates","made");
x.t("command","post");
x.t("command","given");
x.t("command","include");
x.t("command","successful");
x.t("size","batches");
x.t("size","15830");
x.t("size","3654");
x.t("silk","seagull");
x.t("120-bit","value");
x.t("doradus.yaml","hence");
x.t("mutations","flushed");
x.t("status","has_updates");
x.t("status","comment");
x.t("status","element");
x.t("status","_id");
x.t("status","error");
x.t("status","docs");
x.t("status","/status");
x.t("indicates","change");
x.t("indicates","update");
x.t("text/plain","child");
x.t("add","no-op");
x.t("add","batch");
x.t("add","group");
x.t("add","treated");
x.t("add","remove");
x.t("add","kmtkyyrkl4mmrhxj//zvhq==");
x.t("add","afterhours");
x.t("add","value");
x.t("group","example");
x.t("group","below");
x.t("group","fields");
x.t("group","syntax");
x.t("treated","update");
x.t("requested","values");
x.t("due","syntax");
x.t("content-type","text/plain");
x.t("remove","foo");
x.t("spider","rest");
x.t("spider","assigns");
x.t("false","table");
x.t("false","status");
x.t("false","/updated");
x.t("large","batches");
x.t("large","large");
x.t("true","table");
x.t("true","status");
x.t("true","/updated");
x.t("true","docs");
x.t("true","/has_updates");
x.t("true","individual");
x.t("synopses","copens");
x.t("directly","however");
x.t("via","owning");
x.t("name","exist");
x.t("name","{table}");
x.t("enclosed","add");
x.t("stored","multiple");
x.t("corresponds","existing");
x.t("existed","requested");
x.t("base","64-encoded");
x.t("_id","aafe9rf");
x.t("_id","field");
x.t("_id","doradus");
x.t("_id","value");
x.t("uniqueness","even");
x.t("rest","command");
x.t("rest","commands");
x.t("post","{application}");
x.t("encoded","declared");
x.t("fields","binary");
x.t("fields","group");
x.t("fields","directly");
x.t("fields","scalar");
x.t("fields","ignored");
x.t("fields","qualified");
x.t("fields","doc");
x.t("entire","batch");
x.t("entire","parsed");
x.t("input","message");
x.t("input","entity");
x.t("second","add");
x.t("citizens","/field");
x.t("citizens","tags");
x.t("scalars","link");
x.t("request","returned");
x.t("request","content-length");
x.t("request","returns");
x.t("request","updated");
x.t("failed","status");
x.t("commands","add");
x.t("commands","object");
x.t("error","error");
x.t("error","parsed");
x.t("error","returned");
x.t("error","message");
x.t("vestals","/field");
x.t("vestals","tags");
x.t("syntax","error");
x.t("syntax","scalar");
x.t("syntax","even");
x.t("kmtkyyrkl4mmrhxj//zvhq==","/value");
x.t("kmtkyyrkl4mmrhxj//zvhq==","sender");
x.t("kmtkyyrkl4mmrhxj//zvhq==","/field");
x.t("wwr7yzik2p1rri6/qsepxg==","/field");
x.t("wwr7yzik2p1rri6/qsepxg==","doc");
x.t("cluster","scalars");
x.t("scalar","field");
x.t("scalar","link");
x.t("scalar","tags");
x.t("/updated","status");
x.t("/field","/doc");
x.t("/field","field");
x.t("/field","/field");
x.t("internalrecipients","batch");
x.t("internalrecipients","add");
x.t("internalrecipients","kmtkyyrkl4mmrhxj//zvhq==");
x.t("internalrecipients","ii91o7qhb8rphzvaihztqw==");
x.t("unique","based");
x.t("parsed","batch");
x.t("parsed","input");
x.t("{table}","table");
x.t("{table}","{application}");
x.t("application\u2019s","autotables");
x.t("/add","/field");
x.t("2010-07-17","10:37:03");
x.t("twice","second");
x.t("ignored","assignments");
x.t("returned","command");
x.t("returned","along");
x.t("format","example");
x.t("xml","shown");
x.t("2010-07-18","05:22:35");
x.t("/batch","json");
x.t("64-encoded","120-bit");
x.t("held","memory");
x.t("added","autotables");
x.t("added","twice");
x.t("added","format");
x.t("added","given");
x.t("added","specific");
x.t("added","updated");
x.t("multi-node","cluster");
x.t("assigned","multiple");
x.t("assigned","single");
x.t("assigned","values");
x.t("owning","group");
x.t("recipients","field");
x.t("recipients","group");
x.t("/comment","field");
x.t("rejected","e.g");
x.t("node","add");
x.t("assigns","unique");
x.t("ids","object");
x.t("assignments","made");
x.t("given","table");
x.t("given","corresponds");
x.t("given","_id");
x.t("option","true");
x.t("message","included");
x.t("message","example");
x.t("message","xml");
x.t("message","400");
x.t("15830","subject");
x.t("15830","/field");
x.t("memory","mutations");
x.t("memory","entire");
x.t("schema","base64");
x.t("/batch-result","json");
x.t("database","object");
x.t("least","object");
x.t("3654","subject");
x.t("3654","/field");
x.t("e.g","due");
x.t("e.g","aafe95daqrca3bq4hgaa");
x.t("ensure","uniqueness");
x.t("whose","_id");
x.t("content-length","content-type");
x.t("afterhours","/value");
x.t("afterhours","customer");
x.t("afterhours","/field");
x.t("afterhours","internalrecipients");
x.t("existing","objects");
x.t("existing","ids");
x.t("existing","object");
x.t("made","leaf");
x.t("made","_id");
x.t("made","/comment");
x.t("made","database");
x.t("{application}","{table}");
x.t("{application}","application");
x.t("include","input");
x.t("/docs","/batch");
x.t("/docs","/batch-result");
x.t("qualified","via");
x.t("docs","doc");
x.t("value","example");
x.t("value","every");
x.t("value","uses");
x.t("value","customer");
x.t("value","true");
x.t("value","syntax");
x.t("value","kmtkyyrkl4mmrhxj//zvhq==");
x.t("value","afterhours");
x.t("value","generated");
x.t("ii91o7qhb8rphzvaihztqw==","sender");
x.t("ii91o7qhb8rphzvaihztqw==","/field");
x.t("specific","table");
x.t("already","existed");
x.t("douches","spadones");
x.t("generated","ensure");
x.t("actually","made");
x.t("valid","request");
x.t("sub-batch","transactions");
x.t("idempotent","update");
x.t("along","plain");
x.t("doc","shown");
x.t("doc","/doc");
x.t("doc","field");
x.t("doc","element");
x.t("doc","group");
x.t("doc","_id");
x.t("doc","entire");
x.t("doc","updated");
x.t("tags","add");
x.t("tags","assigned");
x.t("tags","afterhours");
x.t("semantics","add");
x.t("semantics","adding");
x.t("defined","doradus.yaml");
x.t("defined","object");
x.t("application","name");
x.t("application","using");
x.t("implicitly","created");
x.t("ih8q==","/field");
x.t("ih8q==","semantics");
x.t("values","has_updates");
x.t("values","field");
x.t("values","enclosed");
x.t("values","encoded");
x.t("values","second");
x.t("successful","request");
x.t("/has_updates","docs");
x.t("400","bad");
x.t("described","below");
x.t("absent","example");
x.t("json","batch");
x.t("json","batch-result");
x.t("based","e.g");
x.t("/status","has_updates");
x.t("/status","comment");
x.t("/status","field");
x.t("/status","docs");
x.t("created","batch");
x.t("created","response");
x.t("following","rest");
x.t("entity","contains");
x.t("poinds","vestals");
x.t("hex","group");
x.t("individual","object");
x.t("using","following");
x.t("using","encoding");
x.t("10:37:03","size");
x.t("10:37:03","/field");
x.t("adding","batches");
x.t("returns","201");
x.t("bad","request");
x.t("child","link");
x.t("spadones","poinds");
x.t("including","objects");
x.t("aafe95daqrca3bq4hgaa","base");
x.t("even","multi-node");
x.t("even","assigned");
x.t("batch_mutation_threshold","defined");
x.t("object","batch");
x.t("object","add");
x.t("object","spider");
x.t("object","_id");
x.t("object","added");
x.t("object","least");
x.t("object","existing");
x.t("object","valid");
x.t("object","update");
x.t("object","updated");
x.t("update","failed");
x.t("update","commands");
x.t("update","node");
x.t("update","semantics");
x.t("update","values");
x.t("update","object");
x.t("contains","objects");
x.t("contains","doc");
x.t("updated","has_updates");
x.t("updated","preserves");
x.t("updated","element");
x.t("updated","false");
x.t("updated","true");
x.t("updated","existing");
x.t("updated","including");
x.t("encoding","declared");
}
